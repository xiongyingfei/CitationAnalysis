[
  [
    ", 32] and MRU [8, 9].\nIn the setting of program reduction, locality of references does not work well because\ntemporal locality rarely shows in program reduction. Furthermore, given the negligible\nmemory overhead of RCC, a program reduction algorithm equipped with RCC does not\nneed the classical cache eviction algorithms such as LRU and MRU to mitigate memory\noverhead.\n7.3\nOptimization for Program Reduction\nThere have been a great number of program reduction techniques proposed in the literature\n[18, 24, 17, 39, 43, 4, 41, 40]. Besides the cache, researchers also proposed other methods\nto improve the performance of program reduction in diverse ways. For example, Hodován\net al. [19] proposed two optimization techniques as the pre-processing, including vertical\ntree squeezing and unresolvable tokens hiding, in order to speed up program reduction.\nKalhauge et al. introduced J-Reduce for Java bytecode reduction [21], and recently they\nfurther reduced bytecode propositional logic [22].\nAll proposed caching schemes belong ",
    ", pages 294–305, 2016.\n43\n[39] Chengnian Sun, Yuanbo Li, Qirun Zhang, Tianxiao Gu, and Zhendong Su. Perses:\nSyntax-guided program reduction. In Proceedings of the 40th International Confer-\nence on Software Engineering, ICSE ’18, page 361–371, New York, NY, USA, 2018.\nAssociation for Computing Machinery.\n[40] Yutian Tang, Hao Zhou, Xiapu Luo, Ting Chen, Haoyu Wang, Zhou Xu, and Yan Cai.\nXdebloat: Towards automated feature-oriented app debloating. IEEE Transactions\non Software Engineering, 2021.\n[41] Guancheng Wang, Ruobing Shen, Junjie Chen, Yingfei Xiong, and Lu Zhang. Proba-\nbilistic delta debugging. In Proceedings of the 29th ACM Joint Meeting on European\nSoftware Engineering Conference and Symposium on the Foundations of Software En-\ngineering, pages 881–892, 2021.\n[42] Xuejun Yang, Yang Chen, Eric Eide, and John Regehr. Finding and understanding\nbugs in C compilers.\nIn Proceedings of the 2011 ACM SIGPLAN Conference on\nProgramming Language Design and Implementation (PLDI), pages 283–29"
  ],
  41
]