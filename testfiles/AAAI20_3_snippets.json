[
  [
    "n executable program that addresses this need? This is the problem\nof automatic program writing that has been explored since the early days of computer science in\nthe 1960s (Waldinger and Lee, 1969; Summers, 1977). From LISP-based pioneering deductive\nsynthesis approaches (Waldinger and Lee, 1969; Summers, 1977) to modern program synthesis\nsystems (Solar-Lezama, 2008; Polozov and Gulwani, 2015), to end-to-end code generation via deep\nneural networks (Mou et al., 2015; Svyatkovskiy et al., 2020; Sun et al., 2020), tremendous efforts\nhave been made to enable machines to automatically write correct programs as part of the quest to\nartificial general intelligence.\nBy treating programs as language sequences, neural sequential architectures, such as recurrent neural\nnetworks and transformer (Vaswani et al., 2017), can be naturally applied to code generation. In fact,\ntransformer-based techniques (Svyatkovskiy et al., 2020; Sun et al., 2020) have shown the potential\nof automatic program writing by starting to generate code that is both syntactically correct and\nconsistent in 2020. This progress is significantly furthered when large language models (transformers\nwith billions of parameters) meet the massive open-sourced code data.\n∗QZ and XX contributed equally. Emails: {qinkai|xiax19}@tsinghua.edu.cn\n†Team Leads: YD, ZY, and JT. Emails: {yuxiaod|zhiliny|jietang}@tsinghua.edu.cn\n‡Corresponding author: JT. Email: jietang@tsinghua.ed",
    "ode\nsynthesis. arXiv preprint arXiv:2009.10297.\nRico Sennrich, Barry Haddow, and Alexandra Birch. 2015. Neural machine translation of rare words\nwith subword units. arXiv preprint arXiv:1508.07909.\n17\nArmando Solar-Lezama. 2008. Program synthesis by sketching. University of California, Berkeley.\nPhillip D Summers. 1977. A methodology for lisp program construction from examples. Journal of\nthe ACM (JACM), 24(1):161–175.\nZeyu Sun, Qihao Zhu, Yingfei Xiong, Yican Sun, Lili Mou, and Lu Zhang. 2020. Treegen: A\ntree-based transformer architecture for code generation. In Proceedings of the AAAI Conference\non Artificial Intelligence, volume 34, pages 8984–8991.\nAlexey Svyatkovskiy, Shao Kun Deng, Shengyu Fu, and Neel Sundaresan. 2020. Intellicode compose:\nCode generation using transformer. In Proceedings of the 28th ACM Joint Meeting on European\nSoftware Engineering Conference and Symposium on the Foundations of Software Engineering,\npages 1433–1443.\nRomal Thoppilan, Daniel De Freitas, Jamie Hall, No"
  ],
  null
]