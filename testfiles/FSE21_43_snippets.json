[
  [
    "]. HDD improves on DD for hier-\narchical inputs like xml, html, and programs. HDD achieves\nthe improvement by considering the AST representation of\nhierarchical inputs [4].\nResearchers proposed many recent algorithms, tools and\ntechniques. They (1) improve over the original DD and HDD\nalgorithms or (2) retrofit DD/HDD implementation for specific\nsituation or programming languages. CReduce, Generalized\nTree Reduction (GTR), Picireny, Perses, DDSET, Observa-\ntional Based Slicing (ORBS), Reduktor, ProbDD, and Re-\nduSharptor are a few such attempts [5]–[11], [13]–[15].\nChristi et al. combined HDD with statement deletion muta-\ntion to propose Test-Based Software Minimization (TBSM)\nthat reduces programs instead of tests to build a minimal\nresource adaptive software while sacrificing low-priority but\nresource-consuming functionality [16]. To improve the per-\nformance of TBSM, they study the outcome of the program\nreduction and the entities that were reduced. Based on that,\nthey proposed multiple h",
    "ess.\nIII. BACKGROUND AND MOTIVATION\nIf we can categorize test program statements into distinct\ncategories and establish an empirical link between the category\nof a statement and its probability of removal, we can preemp-\ntively choose to process or ignore certain types of statements\nin the test reduction process. To this end, the outcome of\ntest reduction and reduced entities need to be studied further.\nStudying the relationship in detail can help to propose efficient\napproaches like perses and probabilistic delta debugging [6],\n[11]. It may help propose heuristics as proposed by Christi et\nal. to reduce the search space for the reduction [17]. So far,\nsuch categorization is not clearly established.\nWe will only consider tests written in C# programming\nlanguage. When DD, HDD or any other techniques are applied\non a test for test reduction, it produces a minimal test.\nThe test can be reduced at a different granularity. For\nexample, a test can be considered as a series of characters and\none or more characters can be",
    " A tool to simplify developer-\nwritten c# unit tests,” International Journal of Software Engineering &\nApplications, vol. 14, pp. 29–40, 09 2023.\n[10] G. Wang, R. Shen, J. Chen, Y. Xiong, and L. Zhang, “Probabilistic delta\ndebugging,” in Proceedings of the 29th ACM Joint Meeting on European\nSoftware Engineering Conference and Symposium on the Foundations\nof Software Engineering, ser. ESEC/FSE 2021.\nNew York, NY, USA:\nAssociation for Computing Machinery, 2021, p. 881–892.\n[11] G. Wang et al., “A probabilistic delta debugging approach for abstract\nsyntax trees,” in 2023 IEEE 34th International Symposium on Software\nReliability Engineering (ISSRE).\nIEEE, 2023, pp. 763–773.\n[12] “ReduSharptor Tool,” https://github.com/amchristi/ReduSharptor, ac-\ncessed: 2024-04-24.\n[13] J. Regehr et al., “Test-case reduction for c compiler bugs,” in 33rd\nACM SIGPLAN Conference on Programming Language Design and\nImplementation, ser. PLDI ’12, pp. 335–346.\n[14] S. Herfert, J. Patra, and M. Pradel, “Automatically reducing tree-\nstructure"
  ],
  null
]